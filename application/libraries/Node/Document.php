<?php

class Node_Document extends Node
{
  protected $subnode_id;

  protected function __construct(
    Collection $collection, $node_id = null, $root_only = false
  )
  {
    if ($pos = strpos( $node_id, '.') ) {
      $this->subnode_id = substr( $node_id, $pos + 1 );
    }

    parent::__construct( $collection, $node_id, $root_only );
  }

  protected function recurse()
  {
    if (
      isset($this->data['contains'])
      && $this->data['contains']
    ) {
      // ... node has 'contains' and is not empty
      $children_names = split(';', $this->data['contains']);

      $children = array();
      foreach ($children_names as $child) {
        $child_id = str_replace('"', $this->id, $child);
        $this->children[] = $this->getChild( $child_id );
      }
    }
  }
  
  public function getNextNode()
  {
    return $this->getNodeFromInterval( 1 );
  }

  public function getPreviousNode()
  {
    return $this->getNodeFromInterval( -1 );
  }

  public function isPaged()
  {
    if (
      $this->getField( 'contains' )
      && $this->getField( 'childtype' ) == 'Paged'
    ) {
      return true;
    }
    else {
      return false;
    }
  }

  public function getPagedUrls()
  {
    if (!$this->isPaged()) {
      return false;
    }

    $root_node = $this->getRootNode();

    $page_count = $root_node->getField( 'NumPages' );
    $slug       = $this->getCollection()->getSlugLookup()
                  ->retrieveSlug( $root_node->getId() );

    if ( $this->getSubnodeId() == '1' ) {
      $prev_url = '';
    }
    else {
      // in paged documents, there SHOULD only be one level of section nodes,
      // hence casting subnode id as integer SHOULD give us good results
      $prev_section_id = ((string) ((int) $this->getSubnodeId()) - 1);
      $prev_node = $this->getRelatedNode( $prev_section_id );
      $prev_url = DocumentSection::factory( $prev_node )->getUrl();
    }

    if ( (int) $this->getSubnodeId() >= (int) $page_count ) {
      $next_url = null;
    }
    else {
      $next_section_id = ((string) ((int) $this->getSubnodeId()) + 1);
      $next_node = $this->getRelatedNode( $next_section_id );
      $next_url = DocumentSection::factory( $next_node )->getUrl();
    }

    return array(
      'previous' => $prev_url,
      'next'     => $next_url,
    );
  }

  protected function getNodeFromInterval( $interval )
  {
    if (!is_int( $interval )) {
      throw new Exception('Argument must be an integer');
    }

    $starting_docnum = (int) $this->getField( 'docnum' );
    $new_docnum = $starting_docnum + $interval;

    // use ad hoc function rather than write a whole ORM mapping
    $new_node = $this->collection->getInfodb()
                ->getRelatedNodeByDocnum( $this, $new_docnum );

    return $new_node;
  }

  protected function getChild( $node_id )
  {
    // TODO refactor this to take subnode/section id rather than full node id
    return Node_Document::factory( $this->collection, $node_id );
  }

  public function getUrl()
  {
    //TODO: placeholder - write NodeFormatter or the like
    //FIXME: is the Node being generated by a Document in the first place??  Shouldn't we be referencing that Document in the Node?
    $url = DocumentSection::factory( $this )->getUrl();

    if ($this->subnode_id) {
      $url .= '/' . str_replace( '.', '/', $this->subnode_id );
    }

    return $url;
  }
  
  public function format()
  {
    $node_formatter = new NodeFormatter();
    $text = $node_formatter->format( $this );

    // FIXME adding the <a> should be contingent on not having been added by NodeFormatter, or moved there altogether

    return html::anchor( $this->getUrl(), $text );
  }

  public static function factory(
    Collection $collection, $node_id, $root_only = false
  )
  {
    return new Node_Document( $collection, $node_id, $root_only );
  }

  protected function staticFactory(
    Collection $collection, $node_id, $root_only = false
  )
  {
    return Node_Document::factory( $collection, $node_id, $root_only );
  }
}