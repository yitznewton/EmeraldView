<?php
/**
 * EmeraldView
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://yitznewton.org/emeraldview/index.php?title=License
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to yitznewton@hotmail.com so we can send you a copy immediately.
 *
 * @version 0.2.0-b4
 * @package libraries
 */
/**
 * SearchHandler is a wrapper class which creates objects and delegates
 * responsibility for search functionality
 *
 * @package libraries
 * @copyright  Copyright (c) 2010 Benjamin Schaffer (http://yitznewton.org/)
 * @license    http://yitznewton.org/emeraldview/index.php?title=License     New BSD License
 */
abstract class SearchHandler
{
  /**
   * An array of the query parameters for this search
   *
   * @var array
   */
  protected $params;
  /**
   * The Collection being searched
   *
   * @var Collection
   */
  protected $collection;
  /**
   * The full path of the directory containing raw node text
   *
   * @var string
   */
  protected $rawTextDir;
  /**
   * A QueryBuilder representing this search
   *
   * @var QueryBuilder
   */
  protected $queryBuilder;
  /**
   * The level of node being searched (document or section)
   *
   * @var string
   */
  protected $indexLevel;
  /**
   * The total number of hits generated by this search
   *
   * @var integer
   */
  protected $totalHitCount;
  /**
   * The Zend_Search_Lucene interface to the appropriate index
   *
   * @var Zend_Search_Lucene
   */
  protected $luceneObject;

  /**
   * @param array $params An array of the query parameters
   * @param Collection $collection The Collection to search
   */
  public function __construct( array $params, Collection $collection )
  {
    $this->params = $this->filterParams( $params );
    $this->collection = $collection;
    $this->queryBuilder = QueryBuilder::factory( $params, $collection );
  }

  /**
   * Performs query and returns an array Hit objects
   *
   * @param integer $per_page
   * @param integer $start_at
   * @return array Hit[]
   */
  abstract public function execute( $per_page, $start_at = 1 );

  /**
   * Returns an array of the query parameters
   *
   * @return array
   */
  public function getParams()
  {
    return $this->params;
  }

  /**
   * Returns an array of query parameters with irrelevant ones filtered out -
   * prepares them for search history processing
   *
   * @param array $params An array of raw parameters
   * @return array
   */
  protected function filterParams( array $params )
  {
    $valid_params = array(
      'l', 'i', 'i1', 'i2', 'i3', 'q', 'q1', 'q2', 'q3', 'b1', 'b2', 'b3',
    );

    foreach( $params as $key => $value ) {
      if ( ! in_array( $key, $valid_params ) ) {
        unset( $params[ $key ] );
      }
    }

    return $params;
  }

  /**
   * Returns the Collection to search
   *
   * @return Collection
   */
  public function getCollection()
  {
    return $this->collection;
  }

  /**
   * Returns total number of hits generated by this search
   *
   * @return integer
   */
  public function getTotalHitCount()
  {
    return $this->totalHitCount;
  }

  /**
   * Returns the QueryBuilder for this search
   * 
   * @return QueryBuilder
   */
  public function getQueryBuilder()
  {
    return $this->queryBuilder;
  }

  /**
   * Returns the level of node being searched (document or section), building
   * it first if necessary
   *
   * @return string
   */
  protected function getIndexLevel()
  {
    if ( isset( $this->indexLevel ) ) {
      return $this->indexLevel;
    }

    $params = $this->getParams();
    $collection = $this->getCollection();

    if (
      isset($params['l'])
      && in_array($params['l'], $collection->getIndexLevels())
    ) {
      return $this->indexLevel = $params['l'];
    }
    elseif ($collection->getDefaultIndexLevel()) {
      return $this->indexLevel = $collection->getDefaultIndexLevel();
    }
    else {
      $search_levels = $collection->getIndexLevels();
      return $this->indexLevel = $search_levels[0];
    }
  }

  /**
   * @param array $params An array of the query parameters
   * @param Collection $collection The Collection to search
   */
  public static function factory( array $params, Collection $collection )
  {
    if ( $collection->getConfig( 'solr_host' ) ) {
      return new SearchHandler_Solr( $params, $collection );
    }
    
    return new SearchHandler_Zend( $params, $collection );
  }
}
